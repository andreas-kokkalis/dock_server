// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package repomocks

import (
	"github.com/andreas-kokkalis/dock_server/pkg/api"
	"sync"
)

var (
	lockDockerRepositoryMockContainerCommit               sync.RWMutex
	lockDockerRepositoryMockContainerGetUsedPorts         sync.RWMutex
	lockDockerRepositoryMockContainerList                 sync.RWMutex
	lockDockerRepositoryMockContainerRemove               sync.RWMutex
	lockDockerRepositoryMockContainerRun                  sync.RWMutex
	lockDockerRepositoryMockGetRunningContainersByImageID sync.RWMutex
	lockDockerRepositoryMockImageGetTagByID               sync.RWMutex
	lockDockerRepositoryMockImageHistory                  sync.RWMutex
	lockDockerRepositoryMockImageList                     sync.RWMutex
	lockDockerRepositoryMockImageRemove                   sync.RWMutex
)

// DockerRepositoryMock is a mock implementation of DockerRepository.
//
//     func TestSomethingThatUsesDockerRepository(t *testing.T) {
//
//         // make and configure a mocked DockerRepository
//         mockedDockerRepository := &DockerRepositoryMock{
//             ContainerCommitFunc: func(comment string, author string, containerID string, refTag string) (string, error) {
// 	               panic("TODO: mock out the ContainerCommit method")
//             },
//             ContainerGetUsedPortsFunc: func() (map[int]string, error) {
// 	               panic("TODO: mock out the ContainerGetUsedPorts method")
//             },
//             ContainerListFunc: func(status string) ([]api.Ctn, error) {
// 	               panic("TODO: mock out the ContainerList method")
//             },
//             ContainerRemoveFunc: func(containerID string, port int) error {
// 	               panic("TODO: mock out the ContainerRemove method")
//             },
//             ContainerRunFunc: func(imageID string, username string, password string, port int) (api.RunConfig, error) {
// 	               panic("TODO: mock out the ContainerRun method")
//             },
//             GetRunningContainersByImageIDFunc: func(imageID string) ([]api.Ctn, error) {
// 	               panic("TODO: mock out the GetRunningContainersByImageID method")
//             },
//             ImageGetTagByIDFunc: func(imageID string) (string, error) {
// 	               panic("TODO: mock out the ImageGetTagByID method")
//             },
//             ImageHistoryFunc: func(imageID string) ([]api.ImgHistory, error) {
// 	               panic("TODO: mock out the ImageHistory method")
//             },
//             ImageListFunc: func() ([]api.Img, error) {
// 	               panic("TODO: mock out the ImageList method")
//             },
//             ImageRemoveFunc: func(imageID string) error {
// 	               panic("TODO: mock out the ImageRemove method")
//             },
//         }
//
//         // TODO: use mockedDockerRepository in code that requires DockerRepository
//         //       and then make assertions.
//
//     }
type DockerRepositoryMock struct {
	// ContainerCommitFunc mocks the ContainerCommit method.
	ContainerCommitFunc func(comment string, author string, containerID string, refTag string) (string, error)

	// ContainerGetUsedPortsFunc mocks the ContainerGetUsedPorts method.
	ContainerGetUsedPortsFunc func() (map[int]string, error)

	// ContainerListFunc mocks the ContainerList method.
	ContainerListFunc func(status string) ([]api.Ctn, error)

	// ContainerRemoveFunc mocks the ContainerRemove method.
	ContainerRemoveFunc func(containerID string, port int) error

	// ContainerRunFunc mocks the ContainerRun method.
	ContainerRunFunc func(imageID string, username string, password string, port int) (api.RunConfig, error)

	// GetRunningContainersByImageIDFunc mocks the GetRunningContainersByImageID method.
	GetRunningContainersByImageIDFunc func(imageID string) ([]api.Ctn, error)

	// ImageGetTagByIDFunc mocks the ImageGetTagByID method.
	ImageGetTagByIDFunc func(imageID string) (string, error)

	// ImageHistoryFunc mocks the ImageHistory method.
	ImageHistoryFunc func(imageID string) ([]api.ImgHistory, error)

	// ImageListFunc mocks the ImageList method.
	ImageListFunc func() ([]api.Img, error)

	// ImageRemoveFunc mocks the ImageRemove method.
	ImageRemoveFunc func(imageID string) error

	// calls tracks calls to the methods.
	calls struct {
		// ContainerCommit holds details about calls to the ContainerCommit method.
		ContainerCommit []struct {
			// Comment is the comment argument value.
			Comment string
			// Author is the author argument value.
			Author string
			// ContainerID is the containerID argument value.
			ContainerID string
			// RefTag is the refTag argument value.
			RefTag string
		}
		// ContainerGetUsedPorts holds details about calls to the ContainerGetUsedPorts method.
		ContainerGetUsedPorts []struct {
		}
		// ContainerList holds details about calls to the ContainerList method.
		ContainerList []struct {
			// Status is the status argument value.
			Status string
		}
		// ContainerRemove holds details about calls to the ContainerRemove method.
		ContainerRemove []struct {
			// ContainerID is the containerID argument value.
			ContainerID string
			// Port is the port argument value.
			Port int
		}
		// ContainerRun holds details about calls to the ContainerRun method.
		ContainerRun []struct {
			// ImageID is the imageID argument value.
			ImageID string
			// Username is the username argument value.
			Username string
			// Password is the password argument value.
			Password string
			// Port is the port argument value.
			Port int
		}
		// GetRunningContainersByImageID holds details about calls to the GetRunningContainersByImageID method.
		GetRunningContainersByImageID []struct {
			// ImageID is the imageID argument value.
			ImageID string
		}
		// ImageGetTagByID holds details about calls to the ImageGetTagByID method.
		ImageGetTagByID []struct {
			// ImageID is the imageID argument value.
			ImageID string
		}
		// ImageHistory holds details about calls to the ImageHistory method.
		ImageHistory []struct {
			// ImageID is the imageID argument value.
			ImageID string
		}
		// ImageList holds details about calls to the ImageList method.
		ImageList []struct {
		}
		// ImageRemove holds details about calls to the ImageRemove method.
		ImageRemove []struct {
			// ImageID is the imageID argument value.
			ImageID string
		}
	}
}

// ContainerCommit calls ContainerCommitFunc.
func (mock *DockerRepositoryMock) ContainerCommit(comment string, author string, containerID string, refTag string) (string, error) {
	if mock.ContainerCommitFunc == nil {
		panic("moq: DockerRepositoryMock.ContainerCommitFunc is nil but DockerRepository.ContainerCommit was just called")
	}
	callInfo := struct {
		Comment     string
		Author      string
		ContainerID string
		RefTag      string
	}{
		Comment:     comment,
		Author:      author,
		ContainerID: containerID,
		RefTag:      refTag,
	}
	lockDockerRepositoryMockContainerCommit.Lock()
	mock.calls.ContainerCommit = append(mock.calls.ContainerCommit, callInfo)
	lockDockerRepositoryMockContainerCommit.Unlock()
	return mock.ContainerCommitFunc(comment, author, containerID, refTag)
}

// ContainerCommitCalls gets all the calls that were made to ContainerCommit.
// Check the length with:
//     len(mockedDockerRepository.ContainerCommitCalls())
func (mock *DockerRepositoryMock) ContainerCommitCalls() []struct {
	Comment     string
	Author      string
	ContainerID string
	RefTag      string
} {
	var calls []struct {
		Comment     string
		Author      string
		ContainerID string
		RefTag      string
	}
	lockDockerRepositoryMockContainerCommit.RLock()
	calls = mock.calls.ContainerCommit
	lockDockerRepositoryMockContainerCommit.RUnlock()
	return calls
}

// ContainerGetUsedPorts calls ContainerGetUsedPortsFunc.
func (mock *DockerRepositoryMock) ContainerGetUsedPorts() (map[int]string, error) {
	if mock.ContainerGetUsedPortsFunc == nil {
		panic("moq: DockerRepositoryMock.ContainerGetUsedPortsFunc is nil but DockerRepository.ContainerGetUsedPorts was just called")
	}
	callInfo := struct {
	}{}
	lockDockerRepositoryMockContainerGetUsedPorts.Lock()
	mock.calls.ContainerGetUsedPorts = append(mock.calls.ContainerGetUsedPorts, callInfo)
	lockDockerRepositoryMockContainerGetUsedPorts.Unlock()
	return mock.ContainerGetUsedPortsFunc()
}

// ContainerGetUsedPortsCalls gets all the calls that were made to ContainerGetUsedPorts.
// Check the length with:
//     len(mockedDockerRepository.ContainerGetUsedPortsCalls())
func (mock *DockerRepositoryMock) ContainerGetUsedPortsCalls() []struct {
} {
	var calls []struct {
	}
	lockDockerRepositoryMockContainerGetUsedPorts.RLock()
	calls = mock.calls.ContainerGetUsedPorts
	lockDockerRepositoryMockContainerGetUsedPorts.RUnlock()
	return calls
}

// ContainerList calls ContainerListFunc.
func (mock *DockerRepositoryMock) ContainerList(status string) ([]api.Ctn, error) {
	if mock.ContainerListFunc == nil {
		panic("moq: DockerRepositoryMock.ContainerListFunc is nil but DockerRepository.ContainerList was just called")
	}
	callInfo := struct {
		Status string
	}{
		Status: status,
	}
	lockDockerRepositoryMockContainerList.Lock()
	mock.calls.ContainerList = append(mock.calls.ContainerList, callInfo)
	lockDockerRepositoryMockContainerList.Unlock()
	return mock.ContainerListFunc(status)
}

// ContainerListCalls gets all the calls that were made to ContainerList.
// Check the length with:
//     len(mockedDockerRepository.ContainerListCalls())
func (mock *DockerRepositoryMock) ContainerListCalls() []struct {
	Status string
} {
	var calls []struct {
		Status string
	}
	lockDockerRepositoryMockContainerList.RLock()
	calls = mock.calls.ContainerList
	lockDockerRepositoryMockContainerList.RUnlock()
	return calls
}

// ContainerRemove calls ContainerRemoveFunc.
func (mock *DockerRepositoryMock) ContainerRemove(containerID string, port int) error {
	if mock.ContainerRemoveFunc == nil {
		panic("moq: DockerRepositoryMock.ContainerRemoveFunc is nil but DockerRepository.ContainerRemove was just called")
	}
	callInfo := struct {
		ContainerID string
		Port        int
	}{
		ContainerID: containerID,
		Port:        port,
	}
	lockDockerRepositoryMockContainerRemove.Lock()
	mock.calls.ContainerRemove = append(mock.calls.ContainerRemove, callInfo)
	lockDockerRepositoryMockContainerRemove.Unlock()
	return mock.ContainerRemoveFunc(containerID, port)
}

// ContainerRemoveCalls gets all the calls that were made to ContainerRemove.
// Check the length with:
//     len(mockedDockerRepository.ContainerRemoveCalls())
func (mock *DockerRepositoryMock) ContainerRemoveCalls() []struct {
	ContainerID string
	Port        int
} {
	var calls []struct {
		ContainerID string
		Port        int
	}
	lockDockerRepositoryMockContainerRemove.RLock()
	calls = mock.calls.ContainerRemove
	lockDockerRepositoryMockContainerRemove.RUnlock()
	return calls
}

// ContainerRun calls ContainerRunFunc.
func (mock *DockerRepositoryMock) ContainerRun(imageID string, username string, password string, port int) (api.RunConfig, error) {
	if mock.ContainerRunFunc == nil {
		panic("moq: DockerRepositoryMock.ContainerRunFunc is nil but DockerRepository.ContainerRun was just called")
	}
	callInfo := struct {
		ImageID  string
		Username string
		Password string
		Port     int
	}{
		ImageID:  imageID,
		Username: username,
		Password: password,
		Port:     port,
	}
	lockDockerRepositoryMockContainerRun.Lock()
	mock.calls.ContainerRun = append(mock.calls.ContainerRun, callInfo)
	lockDockerRepositoryMockContainerRun.Unlock()
	return mock.ContainerRunFunc(imageID, username, password, port)
}

// ContainerRunCalls gets all the calls that were made to ContainerRun.
// Check the length with:
//     len(mockedDockerRepository.ContainerRunCalls())
func (mock *DockerRepositoryMock) ContainerRunCalls() []struct {
	ImageID  string
	Username string
	Password string
	Port     int
} {
	var calls []struct {
		ImageID  string
		Username string
		Password string
		Port     int
	}
	lockDockerRepositoryMockContainerRun.RLock()
	calls = mock.calls.ContainerRun
	lockDockerRepositoryMockContainerRun.RUnlock()
	return calls
}

// GetRunningContainersByImageID calls GetRunningContainersByImageIDFunc.
func (mock *DockerRepositoryMock) GetRunningContainersByImageID(imageID string) ([]api.Ctn, error) {
	if mock.GetRunningContainersByImageIDFunc == nil {
		panic("moq: DockerRepositoryMock.GetRunningContainersByImageIDFunc is nil but DockerRepository.GetRunningContainersByImageID was just called")
	}
	callInfo := struct {
		ImageID string
	}{
		ImageID: imageID,
	}
	lockDockerRepositoryMockGetRunningContainersByImageID.Lock()
	mock.calls.GetRunningContainersByImageID = append(mock.calls.GetRunningContainersByImageID, callInfo)
	lockDockerRepositoryMockGetRunningContainersByImageID.Unlock()
	return mock.GetRunningContainersByImageIDFunc(imageID)
}

// GetRunningContainersByImageIDCalls gets all the calls that were made to GetRunningContainersByImageID.
// Check the length with:
//     len(mockedDockerRepository.GetRunningContainersByImageIDCalls())
func (mock *DockerRepositoryMock) GetRunningContainersByImageIDCalls() []struct {
	ImageID string
} {
	var calls []struct {
		ImageID string
	}
	lockDockerRepositoryMockGetRunningContainersByImageID.RLock()
	calls = mock.calls.GetRunningContainersByImageID
	lockDockerRepositoryMockGetRunningContainersByImageID.RUnlock()
	return calls
}

// ImageGetTagByID calls ImageGetTagByIDFunc.
func (mock *DockerRepositoryMock) ImageGetTagByID(imageID string) (string, error) {
	if mock.ImageGetTagByIDFunc == nil {
		panic("moq: DockerRepositoryMock.ImageGetTagByIDFunc is nil but DockerRepository.ImageGetTagByID was just called")
	}
	callInfo := struct {
		ImageID string
	}{
		ImageID: imageID,
	}
	lockDockerRepositoryMockImageGetTagByID.Lock()
	mock.calls.ImageGetTagByID = append(mock.calls.ImageGetTagByID, callInfo)
	lockDockerRepositoryMockImageGetTagByID.Unlock()
	return mock.ImageGetTagByIDFunc(imageID)
}

// ImageGetTagByIDCalls gets all the calls that were made to ImageGetTagByID.
// Check the length with:
//     len(mockedDockerRepository.ImageGetTagByIDCalls())
func (mock *DockerRepositoryMock) ImageGetTagByIDCalls() []struct {
	ImageID string
} {
	var calls []struct {
		ImageID string
	}
	lockDockerRepositoryMockImageGetTagByID.RLock()
	calls = mock.calls.ImageGetTagByID
	lockDockerRepositoryMockImageGetTagByID.RUnlock()
	return calls
}

// ImageHistory calls ImageHistoryFunc.
func (mock *DockerRepositoryMock) ImageHistory(imageID string) ([]api.ImgHistory, error) {
	if mock.ImageHistoryFunc == nil {
		panic("moq: DockerRepositoryMock.ImageHistoryFunc is nil but DockerRepository.ImageHistory was just called")
	}
	callInfo := struct {
		ImageID string
	}{
		ImageID: imageID,
	}
	lockDockerRepositoryMockImageHistory.Lock()
	mock.calls.ImageHistory = append(mock.calls.ImageHistory, callInfo)
	lockDockerRepositoryMockImageHistory.Unlock()
	return mock.ImageHistoryFunc(imageID)
}

// ImageHistoryCalls gets all the calls that were made to ImageHistory.
// Check the length with:
//     len(mockedDockerRepository.ImageHistoryCalls())
func (mock *DockerRepositoryMock) ImageHistoryCalls() []struct {
	ImageID string
} {
	var calls []struct {
		ImageID string
	}
	lockDockerRepositoryMockImageHistory.RLock()
	calls = mock.calls.ImageHistory
	lockDockerRepositoryMockImageHistory.RUnlock()
	return calls
}

// ImageList calls ImageListFunc.
func (mock *DockerRepositoryMock) ImageList() ([]api.Img, error) {
	if mock.ImageListFunc == nil {
		panic("moq: DockerRepositoryMock.ImageListFunc is nil but DockerRepository.ImageList was just called")
	}
	callInfo := struct {
	}{}
	lockDockerRepositoryMockImageList.Lock()
	mock.calls.ImageList = append(mock.calls.ImageList, callInfo)
	lockDockerRepositoryMockImageList.Unlock()
	return mock.ImageListFunc()
}

// ImageListCalls gets all the calls that were made to ImageList.
// Check the length with:
//     len(mockedDockerRepository.ImageListCalls())
func (mock *DockerRepositoryMock) ImageListCalls() []struct {
} {
	var calls []struct {
	}
	lockDockerRepositoryMockImageList.RLock()
	calls = mock.calls.ImageList
	lockDockerRepositoryMockImageList.RUnlock()
	return calls
}

// ImageRemove calls ImageRemoveFunc.
func (mock *DockerRepositoryMock) ImageRemove(imageID string) error {
	if mock.ImageRemoveFunc == nil {
		panic("moq: DockerRepositoryMock.ImageRemoveFunc is nil but DockerRepository.ImageRemove was just called")
	}
	callInfo := struct {
		ImageID string
	}{
		ImageID: imageID,
	}
	lockDockerRepositoryMockImageRemove.Lock()
	mock.calls.ImageRemove = append(mock.calls.ImageRemove, callInfo)
	lockDockerRepositoryMockImageRemove.Unlock()
	return mock.ImageRemoveFunc(imageID)
}

// ImageRemoveCalls gets all the calls that were made to ImageRemove.
// Check the length with:
//     len(mockedDockerRepository.ImageRemoveCalls())
func (mock *DockerRepositoryMock) ImageRemoveCalls() []struct {
	ImageID string
} {
	var calls []struct {
		ImageID string
	}
	lockDockerRepositoryMockImageRemove.RLock()
	calls = mock.calls.ImageRemove
	lockDockerRepositoryMockImageRemove.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package repomocks

import (
	"github.com/andreas-kokkalis/dock_server/pkg/api"
	"sync"
)

var (
	lockAdminDBRepositoryMockGetAdminByUsername sync.RWMutex
)

// AdminDBRepositoryMock is a mock implementation of AdminDBRepository.
//
//     func TestSomethingThatUsesAdminDBRepository(t *testing.T) {
//
//         // make and configure a mocked AdminDBRepository
//         mockedAdminDBRepository := &AdminDBRepositoryMock{
//             GetAdminByUsernameFunc: func(input api.Admin) (api.Admin, error) {
// 	               panic("TODO: mock out the GetAdminByUsername method")
//             },
//         }
//
//         // TODO: use mockedAdminDBRepository in code that requires AdminDBRepository
//         //       and then make assertions.
//
//     }
type AdminDBRepositoryMock struct {
	// GetAdminByUsernameFunc mocks the GetAdminByUsername method.
	GetAdminByUsernameFunc func(input api.Admin) (api.Admin, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAdminByUsername holds details about calls to the GetAdminByUsername method.
		GetAdminByUsername []struct {
			// Input is the input argument value.
			Input api.Admin
		}
	}
}

// GetAdminByUsername calls GetAdminByUsernameFunc.
func (mock *AdminDBRepositoryMock) GetAdminByUsername(input api.Admin) (api.Admin, error) {
	if mock.GetAdminByUsernameFunc == nil {
		panic("moq: AdminDBRepositoryMock.GetAdminByUsernameFunc is nil but AdminDBRepository.GetAdminByUsername was just called")
	}
	callInfo := struct {
		Input api.Admin
	}{
		Input: input,
	}
	lockAdminDBRepositoryMockGetAdminByUsername.Lock()
	mock.calls.GetAdminByUsername = append(mock.calls.GetAdminByUsername, callInfo)
	lockAdminDBRepositoryMockGetAdminByUsername.Unlock()
	return mock.GetAdminByUsernameFunc(input)
}

// GetAdminByUsernameCalls gets all the calls that were made to GetAdminByUsername.
// Check the length with:
//     len(mockedAdminDBRepository.GetAdminByUsernameCalls())
func (mock *AdminDBRepositoryMock) GetAdminByUsernameCalls() []struct {
	Input api.Admin
} {
	var calls []struct {
		Input api.Admin
	}
	lockAdminDBRepositoryMockGetAdminByUsername.RLock()
	calls = mock.calls.GetAdminByUsername
	lockAdminDBRepositoryMockGetAdminByUsername.RUnlock()
	return calls
}

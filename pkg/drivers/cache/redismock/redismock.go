// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package redismock

import (
	"sync"
	"time"
)

var (
	lockRedisMockClose  sync.RWMutex
	lockRedisMockDel    sync.RWMutex
	lockRedisMockExists sync.RWMutex
	lockRedisMockGet    sync.RWMutex
	lockRedisMockSet    sync.RWMutex
)

// RedisMock is a mock implementation of Redis.
//
//     func TestSomethingThatUsesRedis(t *testing.T) {
//
//         // make and configure a mocked Redis
//         mockedRedis := &RedisMock{
//             CloseFunc: func() error {
// 	               panic("TODO: mock out the Close method")
//             },
//             DelFunc: func(in1 string) (int64, error) {
// 	               panic("TODO: mock out the Del method")
//             },
//             ExistsFunc: func(in1 string) (bool, error) {
// 	               panic("TODO: mock out the Exists method")
//             },
//             GetFunc: func(in1 string) (string, error) {
// 	               panic("TODO: mock out the Get method")
//             },
//             SetFunc: func(in1 string, in2 string, in3 time.Duration) (string, error) {
// 	               panic("TODO: mock out the Set method")
//             },
//         }
//
//         // TODO: use mockedRedis in code that requires Redis
//         //       and then make assertions.
//
//     }
type RedisMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// DelFunc mocks the Del method.
	DelFunc func(in1 string) (int64, error)

	// ExistsFunc mocks the Exists method.
	ExistsFunc func(in1 string) (bool, error)

	// GetFunc mocks the Get method.
	GetFunc func(in1 string) (string, error)

	// SetFunc mocks the Set method.
	SetFunc func(in1 string, in2 string, in3 time.Duration) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// Del holds details about calls to the Del method.
		Del []struct {
			// In1 is the in1 argument value.
			In1 string
		}
		// Exists holds details about calls to the Exists method.
		Exists []struct {
			// In1 is the in1 argument value.
			In1 string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// In1 is the in1 argument value.
			In1 string
		}
		// Set holds details about calls to the Set method.
		Set []struct {
			// In1 is the in1 argument value.
			In1 string
			// In2 is the in2 argument value.
			In2 string
			// In3 is the in3 argument value.
			In3 time.Duration
		}
	}
}

// Close calls CloseFunc.
func (mock *RedisMock) Close() error {
	if mock.CloseFunc == nil {
		panic("moq: RedisMock.CloseFunc is nil but Redis.Close was just called")
	}
	callInfo := struct {
	}{}
	lockRedisMockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	lockRedisMockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedRedis.CloseCalls())
func (mock *RedisMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	lockRedisMockClose.RLock()
	calls = mock.calls.Close
	lockRedisMockClose.RUnlock()
	return calls
}

// Del calls DelFunc.
func (mock *RedisMock) Del(in1 string) (int64, error) {
	if mock.DelFunc == nil {
		panic("moq: RedisMock.DelFunc is nil but Redis.Del was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	lockRedisMockDel.Lock()
	mock.calls.Del = append(mock.calls.Del, callInfo)
	lockRedisMockDel.Unlock()
	return mock.DelFunc(in1)
}

// DelCalls gets all the calls that were made to Del.
// Check the length with:
//     len(mockedRedis.DelCalls())
func (mock *RedisMock) DelCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	lockRedisMockDel.RLock()
	calls = mock.calls.Del
	lockRedisMockDel.RUnlock()
	return calls
}

// Exists calls ExistsFunc.
func (mock *RedisMock) Exists(in1 string) (bool, error) {
	if mock.ExistsFunc == nil {
		panic("moq: RedisMock.ExistsFunc is nil but Redis.Exists was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	lockRedisMockExists.Lock()
	mock.calls.Exists = append(mock.calls.Exists, callInfo)
	lockRedisMockExists.Unlock()
	return mock.ExistsFunc(in1)
}

// ExistsCalls gets all the calls that were made to Exists.
// Check the length with:
//     len(mockedRedis.ExistsCalls())
func (mock *RedisMock) ExistsCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	lockRedisMockExists.RLock()
	calls = mock.calls.Exists
	lockRedisMockExists.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *RedisMock) Get(in1 string) (string, error) {
	if mock.GetFunc == nil {
		panic("moq: RedisMock.GetFunc is nil but Redis.Get was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	lockRedisMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockRedisMockGet.Unlock()
	return mock.GetFunc(in1)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedRedis.GetCalls())
func (mock *RedisMock) GetCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	lockRedisMockGet.RLock()
	calls = mock.calls.Get
	lockRedisMockGet.RUnlock()
	return calls
}

// Set calls SetFunc.
func (mock *RedisMock) Set(in1 string, in2 string, in3 time.Duration) (string, error) {
	if mock.SetFunc == nil {
		panic("moq: RedisMock.SetFunc is nil but Redis.Set was just called")
	}
	callInfo := struct {
		In1 string
		In2 string
		In3 time.Duration
	}{
		In1: in1,
		In2: in2,
		In3: in3,
	}
	lockRedisMockSet.Lock()
	mock.calls.Set = append(mock.calls.Set, callInfo)
	lockRedisMockSet.Unlock()
	return mock.SetFunc(in1, in2, in3)
}

// SetCalls gets all the calls that were made to Set.
// Check the length with:
//     len(mockedRedis.SetCalls())
func (mock *RedisMock) SetCalls() []struct {
	In1 string
	In2 string
	In3 time.Duration
} {
	var calls []struct {
		In1 string
		In2 string
		In3 time.Duration
	}
	lockRedisMockSet.RLock()
	calls = mock.calls.Set
	lockRedisMockSet.RUnlock()
	return calls
}
